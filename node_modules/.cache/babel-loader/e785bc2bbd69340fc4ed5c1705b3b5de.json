{"ast":null,"code":"import { ALL_ITEMS, LOADING, PEOPLE, PLANETS, RESOURCE, STARSHIPS } from \"./LayoutConstants\";\nimport { getItemsInfo } from \"../../../utils/api\";\nimport { allItems, expectedResource, loading, peopleItems, planetsItems, starshipsItems } from \"./LayoutActions\";\nimport { error } from \"../../../utils/helpers/infoMessages\";\nimport { takeEvery, put, call } from 'redux-saga/effects';\nconst initialState = {\n  items: [],\n  people: [],\n  planets: [],\n  starships: [],\n  isLoading: false,\n  resource: ''\n};\n\nconst LayoutReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ALL_ITEMS:\n      console.log(state.items, action.payload);\n      return { ...state,\n        items: state.items.concat(action.payload)\n      };\n\n    case PEOPLE:\n      return { ...state,\n        people: state.people.concat(action.payload)\n      };\n\n    case PLANETS:\n      return { ...state,\n        planets: state.planets.concat(action.payload)\n      };\n\n    case STARSHIPS:\n      console.log(action.payload);\n      return { ...state,\n        starships: state.starships.concat(action.payload)\n      };\n\n    case RESOURCE:\n      return { ...state,\n        resource: action.payload\n      };\n\n    case LOADING:\n      return { ...state,\n        isLoading: action.payload\n      };\n\n    default:\n      return state;\n  }\n}; // export const getItems = (resource, page) => dispatch => {\n//     return {resource, page}\n//     dispatch(loading(true))\n//     getItemsInfo(resource, page)\n//         .then( item => {\n//             if (resource === 'people') {\n//                 dispatch(peopleItems(item.data.results));\n//             }\n//             if (resource === 'planets') {\n//                 dispatch(planetsItems(item.data.results));\n//             }\n//             if (resource === 'starships') {\n//                 dispatch(starshipsItems(item.data.results));\n//             }\n//\n//             dispatch(allItems(item.data.results));\n//         })\n//         .catch(() => error('Something is wrong'))\n//         .finally(() => dispatch(loading(false)))\n// }\n// export function* sagaWatcher () {\n//     yield takeEvery(ALL_ITEMS, sagaWorker)\n//\n// }\n//\n// function* sagaWorker() {\n//     getItems()\n//\n//     const payload = yield call(getItemsInfo(resource, page))\n//     yield put({type: ALL_ITEMS, payload})\n//\n// }\n\n\n_c = LayoutReducer;\nexport const setResource = resource => dispatch => {\n  dispatch(expectedResource(resource));\n};\nexport default LayoutReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"LayoutReducer\");","map":{"version":3,"sources":["E:/Projects/react-project/src/redux/session/Layout/LayoutReducer.js"],"names":["ALL_ITEMS","LOADING","PEOPLE","PLANETS","RESOURCE","STARSHIPS","getItemsInfo","allItems","expectedResource","loading","peopleItems","planetsItems","starshipsItems","error","takeEvery","put","call","initialState","items","people","planets","starships","isLoading","resource","LayoutReducer","state","action","type","console","log","payload","concat","setResource","dispatch"],"mappings":"AAAA,SAAQA,SAAR,EAAmBC,OAAnB,EAA4BC,MAA5B,EAAoCC,OAApC,EAA6CC,QAA7C,EAAuDC,SAAvD,QAAuE,mBAAvE;AACA,SAAQC,YAAR,QAA2B,oBAA3B;AACA,SAAQC,QAAR,EAAkBC,gBAAlB,EAAoCC,OAApC,EAA6CC,WAA7C,EAA0DC,YAA1D,EAAwEC,cAAxE,QAA6F,iBAA7F;AACA,SAAQC,KAAR,QAAoB,qCAApB;AACA,SAAQC,SAAR,EAAmBC,GAAnB,EAAwBC,IAAxB,QAAmC,oBAAnC;AAGA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAC,EADW;AAEjBC,EAAAA,MAAM,EAAE,EAFS;AAGjBC,EAAAA,OAAO,EAAC,EAHS;AAIjBC,EAAAA,SAAS,EAAC,EAJO;AAKjBC,EAAAA,SAAS,EAAE,KALM;AAMjBC,EAAAA,QAAQ,EAAE;AANO,CAArB;;AASA,MAAMC,aAAa,GAAG,CAACC,KAAK,GAAGR,YAAT,EAAuBS,MAAvB,KAAkC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK3B,SAAL;AACI4B,MAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACP,KAAlB,EAAyBQ,MAAM,CAACI,OAAhC;AACA,aAAO,EACH,GAAGL,KADA;AAEHP,QAAAA,KAAK,EAAEO,KAAK,CAACP,KAAN,CAAYa,MAAZ,CAAmBL,MAAM,CAACI,OAA1B;AAFJ,OAAP;;AAIJ,SAAK5B,MAAL;AACI,aAAO,EACH,GAAGuB,KADA;AAEHN,QAAAA,MAAM,EAAEM,KAAK,CAACN,MAAN,CAAaY,MAAb,CAAoBL,MAAM,CAACI,OAA3B;AAFL,OAAP;;AAIJ,SAAK3B,OAAL;AACI,aAAO,EACH,GAAGsB,KADA;AAEHL,QAAAA,OAAO,EAAEK,KAAK,CAACL,OAAN,CAAcW,MAAd,CAAqBL,MAAM,CAACI,OAA5B;AAFN,OAAP;;AAIJ,SAAKzB,SAAL;AACIuB,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACI,OAAnB;AACA,aAAO,EACH,GAAGL,KADA;AAEHJ,QAAAA,SAAS,EAAEI,KAAK,CAACJ,SAAN,CAAgBU,MAAhB,CAAuBL,MAAM,CAACI,OAA9B;AAFR,OAAP;;AAIJ,SAAK1B,QAAL;AACI,aAAO,EACH,GAAGqB,KADA;AAEHF,QAAAA,QAAQ,EAAEG,MAAM,CAACI;AAFd,OAAP;;AAIJ,SAAK7B,OAAL;AACI,aAAO,EACH,GAAGwB,KADA;AAEHH,QAAAA,SAAS,EAAEI,MAAM,CAACI;AAFf,OAAP;;AAKJ;AACI,aAAOL,KAAP;AAnCR;AAqCH,CAtCD,C,CAuCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;KAzEMD,a;AA4EN,OAAO,MAAMQ,WAAW,GAAGT,QAAQ,IAAIU,QAAQ,IAAI;AACvCA,EAAAA,QAAQ,CAACzB,gBAAgB,CAACe,QAAD,CAAjB,CAAR;AACX,CAFM;AAGP,eAAeC,aAAf","sourcesContent":["import {ALL_ITEMS, LOADING, PEOPLE, PLANETS, RESOURCE, STARSHIPS} from \"./LayoutConstants\";\r\nimport {getItemsInfo} from \"../../../utils/api\";\r\nimport {allItems, expectedResource, loading, peopleItems, planetsItems, starshipsItems} from \"./LayoutActions\";\r\nimport {error} from \"../../../utils/helpers/infoMessages\";\r\nimport {takeEvery, put, call} from 'redux-saga/effects'\r\n\r\n\r\nconst initialState = {\r\n    items:[],\r\n    people: [],\r\n    planets:[],\r\n    starships:[],\r\n    isLoading: false,\r\n    resource: ''\r\n};\r\n\r\nconst LayoutReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ALL_ITEMS:\r\n            console.log(state.items, action.payload)\r\n            return {\r\n                ...state,\r\n                items: state.items.concat(action.payload)\r\n            };\r\n        case PEOPLE:\r\n            return {\r\n                ...state,\r\n                people: state.people.concat(action.payload)\r\n            };\r\n        case PLANETS:\r\n            return {\r\n                ...state,\r\n                planets: state.planets.concat(action.payload)\r\n            };\r\n        case STARSHIPS:\r\n            console.log(action.payload)\r\n            return {\r\n                ...state,\r\n                starships: state.starships.concat(action.payload)\r\n            };\r\n        case RESOURCE:\r\n            return {\r\n                ...state,\r\n                resource: action.payload,\r\n            };\r\n        case LOADING:\r\n            return {\r\n                ...state,\r\n                isLoading: action.payload,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n// export const getItems = (resource, page) => dispatch => {\r\n//     return {resource, page}\r\n//     dispatch(loading(true))\r\n//     getItemsInfo(resource, page)\r\n//         .then( item => {\r\n//             if (resource === 'people') {\r\n//                 dispatch(peopleItems(item.data.results));\r\n//             }\r\n//             if (resource === 'planets') {\r\n//                 dispatch(planetsItems(item.data.results));\r\n//             }\r\n//             if (resource === 'starships') {\r\n//                 dispatch(starshipsItems(item.data.results));\r\n//             }\r\n//\r\n//             dispatch(allItems(item.data.results));\r\n//         })\r\n//         .catch(() => error('Something is wrong'))\r\n//         .finally(() => dispatch(loading(false)))\r\n// }\r\n\r\n\r\n\r\n// export function* sagaWatcher () {\r\n//     yield takeEvery(ALL_ITEMS, sagaWorker)\r\n//\r\n// }\r\n//\r\n// function* sagaWorker() {\r\n//     getItems()\r\n//\r\n//     const payload = yield call(getItemsInfo(resource, page))\r\n//     yield put({type: ALL_ITEMS, payload})\r\n//\r\n// }\r\n\r\n\r\nexport const setResource = resource => dispatch => {\r\n            dispatch(expectedResource(resource));\r\n}\r\nexport default LayoutReducer;\r\n"]},"metadata":{},"sourceType":"module"}