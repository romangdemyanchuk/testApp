{"ast":null,"code":"import { LOGIN, REGISTER } from \"./AuthConstants\";\nimport { login, register } from \"../../../utils/api\";\nimport { success, error } from \"../../../utils/helpers/infoMessages\";\nimport { redirect } from \"../../../utils/helpers/functions\";\nimport { loginAction } from \"./AuthActions\";\nconst initialState = {\n  loginInfo: [],\n  isAuth: false\n};\n\nconst AuthReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOGIN:\n      return { ...state,\n        loginInfo: action.payload,\n        isAuth: true\n      };\n\n    case REGISTER:\n      return { ...state // registerData: action.payload,\n\n      };\n\n    default:\n      return state;\n  }\n};\n\n_c = AuthReducer;\nexport default AuthReducer;\nexport const LoginRequest = (data, history) => dispatch => {\n  login(data).then(response => {\n    if (response.statusText === \"OK\") {\n      localStorage.setItem(\"isAuth\", true);\n      success('You successfully login');\n      redirect('/people', history);\n      dispatch(loginAction(response));\n    }\n  }).catch(e => error(e.response.data.message));\n};\nexport const RegisterRequest = (data, history) => dispatch => {\n  register(data).then(response => {\n    if (response.request.statusText === \"Created\") {\n      login(data).then(response => {\n        console.log(45, response);\n\n        if (response.statusText === \"OK\") {\n          let token = response.data.token;\n          localStorage.setItem(\"userLoginToken\", token);\n          localStorage.setItem(\"isAuth\", true);\n          dispatch(loginAction(response));\n          success('You successfully register and login');\n          redirect('/people', history);\n        }\n      });\n    }\n  }).catch(e => error(e.response.data.message));\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthReducer\");","map":{"version":3,"sources":["E:/Projects/react-project/src/redux/session/Auth/AuthReducer.js"],"names":["LOGIN","REGISTER","login","register","success","error","redirect","loginAction","initialState","loginInfo","isAuth","AuthReducer","state","action","type","payload","LoginRequest","data","history","dispatch","then","response","statusText","localStorage","setItem","catch","e","message","RegisterRequest","request","console","log","token"],"mappings":"AAAA,SAAQA,KAAR,EAAeC,QAAf,QAA8B,iBAA9B;AACA,SAAQC,KAAR,EAAeC,QAAf,QAA8B,oBAA9B;AACA,SAAQC,OAAR,EAAiBC,KAAjB,QAA6B,qCAA7B;AACA,SAAQC,QAAR,QAAuB,kCAAvB;AACA,SAAQC,WAAR,QAA4B,eAA5B;AAGA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,SAAS,EAAC,EADO;AAEjBC,EAAAA,MAAM,EAAE;AAFS,CAArB;;AAMA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKd,KAAL;AACI,aAAO,EACH,GAAGY,KADA;AAEHH,QAAAA,SAAS,EAAEI,MAAM,CAACE,OAFf;AAGHL,QAAAA,MAAM,EAAE;AAHL,OAAP;;AAKJ,SAAKT,QAAL;AACI,aAAO,EACH,GAAGW,KADA,CAEH;;AAFG,OAAP;;AAKJ;AACI,aAAOA,KAAP;AAdR;AAgBH,CAjBD;;KAAMD,W;AAkBN,eAAeA,WAAf;AAEA,OAAO,MAAMK,YAAY,GAAG,CAACC,IAAD,EAAOC,OAAP,KAAoBC,QAAD,IAAc;AACzDjB,EAAAA,KAAK,CAACe,IAAD,CAAL,CACKG,IADL,CACWC,QAAD,IAAc;AAChB,QAAIA,QAAQ,CAACC,UAAT,KAAwB,IAA5B,EAAkC;AAC9BC,MAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+B,IAA/B;AACApB,MAAAA,OAAO,CAAC,wBAAD,CAAP;AACAE,MAAAA,QAAQ,CAAC,SAAD,EAAYY,OAAZ,CAAR;AACAC,MAAAA,QAAQ,CAACZ,WAAW,CAACc,QAAD,CAAZ,CAAR;AACH;AACJ,GARL,EASKI,KATL,CASYC,CAAD,IAAOrB,KAAK,CAACqB,CAAC,CAACL,QAAF,CAAWJ,IAAX,CAAgBU,OAAjB,CATvB;AAWH,CAZM;AAcP,OAAO,MAAMC,eAAe,GAAG,CAACX,IAAD,EAAOC,OAAP,KAAoBC,QAAD,IAAc;AAC5DhB,EAAAA,QAAQ,CAACc,IAAD,CAAR,CACKG,IADL,CACWC,QAAD,IAAc;AAChB,QAAGA,QAAQ,CAACQ,OAAT,CAAiBP,UAAjB,KAAgC,SAAnC,EAA8C;AAC1CpB,MAAAA,KAAK,CAACe,IAAD,CAAL,CACKG,IADL,CACWC,QAAD,IAAc;AAChBS,QAAAA,OAAO,CAACC,GAAR,CAAY,EAAZ,EAAgBV,QAAhB;;AACA,YAAIA,QAAQ,CAACC,UAAT,KAAwB,IAA5B,EAAkC;AAC9B,cAAIU,KAAK,GAAGX,QAAQ,CAACJ,IAAT,CAAce,KAA1B;AACAT,UAAAA,YAAY,CAACC,OAAb,CAAqB,gBAArB,EAAuCQ,KAAvC;AACAT,UAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+B,IAA/B;AACAL,UAAAA,QAAQ,CAACZ,WAAW,CAACc,QAAD,CAAZ,CAAR;AACAjB,UAAAA,OAAO,CAAC,qCAAD,CAAP;AACAE,UAAAA,QAAQ,CAAC,SAAD,EAAYY,OAAZ,CAAR;AACH;AACJ,OAXL;AAYH;AACJ,GAhBL,EAiBKO,KAjBL,CAiBYC,CAAD,IAAOrB,KAAK,CAACqB,CAAC,CAACL,QAAF,CAAWJ,IAAX,CAAgBU,OAAjB,CAjBvB;AAkBH,CAnBM","sourcesContent":["import {LOGIN, REGISTER} from \"./AuthConstants\";\r\nimport {login, register} from \"../../../utils/api\";\r\nimport {success, error} from \"../../../utils/helpers/infoMessages\";\r\nimport {redirect} from \"../../../utils/helpers/functions\";\r\nimport {loginAction, } from \"./AuthActions\";\r\n\r\n\r\nconst initialState = {\r\n    loginInfo:[],\r\n    isAuth: false\r\n};\r\n\r\n\r\nconst AuthReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case LOGIN:\r\n            return {\r\n                ...state,\r\n                loginInfo: action.payload,\r\n                isAuth: true,\r\n            };\r\n        case REGISTER:\r\n            return {\r\n                ...state,\r\n                // registerData: action.payload,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport default AuthReducer;\r\n\r\nexport const LoginRequest = (data, history) => (dispatch) => {\r\n    login(data)\r\n        .then((response) => {\r\n            if (response.statusText === \"OK\") {\r\n                localStorage.setItem(\"isAuth\", true);\r\n                success('You successfully login')\r\n                redirect('/people', history)\r\n                dispatch(loginAction(response));\r\n            }\r\n        })\r\n        .catch((e) => error(e.response.data.message))\r\n\r\n};\r\n\r\nexport const RegisterRequest = (data, history) => (dispatch) => {\r\n    register(data)\r\n        .then((response) => {\r\n            if(response.request.statusText === \"Created\") {\r\n                login(data)\r\n                    .then((response) => {\r\n                        console.log(45, response)\r\n                        if (response.statusText === \"OK\") {\r\n                            let token = response.data.token;\r\n                            localStorage.setItem(\"userLoginToken\", token);\r\n                            localStorage.setItem(\"isAuth\", true);\r\n                            dispatch(loginAction(response));\r\n                            success('You successfully register and login')\r\n                            redirect('/people', history)\r\n                        }\r\n                    })\r\n            }\r\n        })\r\n        .catch((e) => error(e.response.data.message))\r\n};\r\n"]},"metadata":{},"sourceType":"module"}