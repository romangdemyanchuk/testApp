{"ast":null,"code":"/* eslint-disable */\nimport { LOGIN, REGISTER, LOADING, REGISTER_BY_ADMIN } from \"./session-constants\";\nimport { RegisterApi, LoginApi, ChangePasswordApi, UploadResults, AddUser } from '../../api';\nimport { Register, Loading, Login, AllCases, RegisterInAdmin } from \"./session-actions\";\nimport { infoAction } from \"../../utils/notification\";\nimport { allUsers } from './main-reducer';\nimport { login, register } from \"../../utils/api\";\nconst initialState = {};\n\nconst AuthReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOGIN:\n      return { ...state,\n        adminLoginData: action.payload,\n        isAuth: true\n      };\n\n    case REGISTER:\n      return { ...state,\n        registerData: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\n_c = AuthReducer;\nexport default AuthReducer;\nexport const LoginRequest = data => dispatch => {\n  LoginApi(data).then(response => {\n    if (response.statusText === \"OK\") {\n      let token = response.data.token;\n      localStorage.setItem(\"userLoginToken\", token);\n      localStorage.setItem(\"isAuth\", true);\n      dispatch(Login(response));\n    }\n  }).finally(() => {\n    dispatch(Loading(false));\n  });\n};\nexport const RegisterRequest = (data, history) => dispatch => {\n  register(data).then(response => {\n    if (response.request.statusText === \"Created\") {\n      login(data).then(response => {\n        if (response.statusText === \"OK\") {\n          let token = response.data.token;\n          localStorage.setItem(\"userLoginToken\", token);\n          localStorage.setItem(\"isAuth\", true);\n          dispatch(Login(response));\n          history.push('/participant-profile');\n          return infoAction(\"You successfully register and login :)\", \"/participant-profile\");\n        }\n      });\n    }\n\n    dispatch(Loading(false));\n  }).catch(e => {\n    if (e.response.status) {\n      infoAction(e.response.data.message, \"\");\n    }\n\n    dispatch(Loading(false));\n  });\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthReducer\");","map":{"version":3,"sources":["E:/Projects/react-project/src/redux/session/AuthReducer.js"],"names":["LOGIN","REGISTER","LOADING","REGISTER_BY_ADMIN","RegisterApi","LoginApi","ChangePasswordApi","UploadResults","AddUser","Register","Loading","Login","AllCases","RegisterInAdmin","infoAction","allUsers","login","register","initialState","AuthReducer","state","action","type","adminLoginData","payload","isAuth","registerData","LoginRequest","data","dispatch","then","response","statusText","token","localStorage","setItem","finally","RegisterRequest","history","request","push","catch","e","status","message"],"mappings":"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","sourcesContent":["/* eslint-disable */\r\nimport { LOGIN, REGISTER, LOADING, REGISTER_BY_ADMIN } from \"./session-constants\";\r\nimport { RegisterApi, LoginApi, ChangePasswordApi, UploadResults, AddUser } from '../../api'\r\nimport { Register, Loading, Login, AllCases, RegisterInAdmin } from \"./session-actions\";\r\nimport { infoAction } from \"../../utils/notification\";\r\nimport { allUsers } from './main-reducer'\r\nimport {login, register} from \"../../utils/api\";\r\n\r\nconst initialState = {\r\n};\r\n\r\nconst AuthReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case LOGIN:\r\n            return {\r\n                ...state,\r\n                adminLoginData: action.payload,\r\n                isAuth: true,\r\n            };\r\n        case REGISTER:\r\n            return {\r\n                ...state,\r\n                registerData: action.payload,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport default AuthReducer;\r\n\r\nexport const LoginRequest = (data) => (dispatch) => {\r\n    LoginApi(data)\r\n        .then((response) => {\r\n            if (response.statusText === \"OK\") {\r\n                let token = response.data.token;\r\n                localStorage.setItem(\"userLoginToken\", token);\r\n                localStorage.setItem(\"isAuth\", true);\r\n                dispatch(Login(response));\r\n            }\r\n        })\r\n        .finally(() => {\r\n            dispatch(Loading(false));\r\n        });\r\n};\r\n\r\nexport const RegisterRequest = (data, history) => (dispatch) => {\r\n    register(data)\r\n        .then((response) => {\r\n            if(response.request.statusText === \"Created\") {\r\n                login(data)\r\n                    .then((response) => {\r\n                        if (response.statusText === \"OK\") {\r\n                            let token = response.data.token;\r\n                            localStorage.setItem(\"userLoginToken\", token);\r\n                            localStorage.setItem(\"isAuth\", true);\r\n                            dispatch(Login(response));\r\n                            history.push('/participant-profile')\r\n                            return infoAction(\"You successfully register and login :)\",\"/participant-profile\")\r\n                        }\r\n                    })\r\n            }\r\n            dispatch(Loading(false));\r\n        })\r\n        .catch((e) => {\r\n            if (e.response.status) {\r\n                infoAction(e.response.data.message, \"\");\r\n            }\r\n            dispatch(Loading(false));\r\n        });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}