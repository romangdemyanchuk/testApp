{"ast":null,"code":"/* eslint-disable */\nimport { login, register } from \"../../utils/api\";\nimport { LOGIN, REGISTER } from \"./constants\";\nimport { loginAction } from \"./actions\";\nimport { success, error } from \"../../utils/helpers/infoMessages\";\nconst initialState = {\n  loginInfo: [],\n  isAuth: false\n};\n\nconst AuthReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOGIN:\n      return { ...state,\n        loginInfo: action.payload,\n        isAuth: true\n      };\n\n    case REGISTER:\n      return { ...state // registerData: action.payload,\n\n      };\n\n    default:\n      return state;\n  }\n};\n\n_c = AuthReducer;\nexport default AuthReducer;\nexport const LoginRequest = data => dispatch => {\n  login(data).then(response => {\n    if (response.statusText === \"OK\") {\n      let token = response.data.token;\n      localStorage.setItem(\"userLoginToken\", token);\n      localStorage.setItem(\"isAuth\", true);\n      success('You successfully login');\n      dispatch(loginAction(response));\n    }\n  }).catch(e => {\n    error(e.response.data.message);\n  });\n};\nexport const RegisterRequest = (data, history) => dispatch => {\n  register(data).then(response => {\n    console.log(45, response);\n\n    if (response.request.statusText === \"Created\") {\n      login(data).then(response => {\n        console.log(45, response);\n\n        if (response.statusText === \"OK\") {\n          let token = response.data.token;\n          localStorage.setItem(\"userLoginToken\", token);\n          localStorage.setItem(\"isAuth\", true);\n          dispatch(loginAction(response));\n        }\n      });\n    }\n  }).catch(e => {\n    if (e.response.status) {\n      alert(e.response.status); // infoAction(e.response.data.message, \"\");\n    }\n  });\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthReducer\");","map":{"version":3,"sources":["E:/Projects/react-project/src/redux/session/AuthReducer.js"],"names":["login","register","LOGIN","REGISTER","loginAction","success","error","initialState","loginInfo","isAuth","AuthReducer","state","action","type","payload","LoginRequest","data","dispatch","then","response","statusText","token","localStorage","setItem","catch","e","message","RegisterRequest","history","console","log","request","status","alert"],"mappings":"AAAA;AACA,SAAQA,KAAR,EAAeC,QAAf,QAA8B,iBAA9B;AACA,SAAQC,KAAR,EAAeC,QAAf,QAA8B,aAA9B;AACA,SAAQC,WAAR,QAA0B,WAA1B;AACA,SAAQC,OAAR,EAAiBC,KAAjB,QAA6B,kCAA7B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,SAAS,EAAC,EADO;AAEjBC,EAAAA,MAAM,EAAE;AAFS,CAArB;;AAKA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKX,KAAL;AACI,aAAO,EACH,GAAGS,KADA;AAEHH,QAAAA,SAAS,EAAEI,MAAM,CAACE,OAFf;AAGHL,QAAAA,MAAM,EAAE;AAHL,OAAP;;AAKJ,SAAKN,QAAL;AACI,aAAO,EACH,GAAGQ,KADA,CAEH;;AAFG,OAAP;;AAKJ;AACI,aAAOA,KAAP;AAdR;AAgBH,CAjBD;;KAAMD,W;AAkBN,eAAeA,WAAf;AAEA,OAAO,MAAMK,YAAY,GAAIC,IAAD,IAAWC,QAAD,IAAc;AAChDjB,EAAAA,KAAK,CAACgB,IAAD,CAAL,CACKE,IADL,CACWC,QAAD,IAAc;AAChB,QAAIA,QAAQ,CAACC,UAAT,KAAwB,IAA5B,EAAkC;AAC9B,UAAIC,KAAK,GAAGF,QAAQ,CAACH,IAAT,CAAcK,KAA1B;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,gBAArB,EAAuCF,KAAvC;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+B,IAA/B;AACAlB,MAAAA,OAAO,CAAC,wBAAD,CAAP;AACAY,MAAAA,QAAQ,CAACb,WAAW,CAACe,QAAD,CAAZ,CAAR;AACH;AACJ,GATL,EAUKK,KAVL,CAUYC,CAAD,IAAO;AACVnB,IAAAA,KAAK,CAACmB,CAAC,CAACN,QAAF,CAAWH,IAAX,CAAgBU,OAAjB,CAAL;AACH,GAZL;AAaH,CAdM;AAgBP,OAAO,MAAMC,eAAe,GAAG,CAACX,IAAD,EAAOY,OAAP,KAAoBX,QAAD,IAAc;AAC5DhB,EAAAA,QAAQ,CAACe,IAAD,CAAR,CACKE,IADL,CACWC,QAAD,IAAc;AAChBU,IAAAA,OAAO,CAACC,GAAR,CAAY,EAAZ,EAAgBX,QAAhB;;AACA,QAAGA,QAAQ,CAACY,OAAT,CAAiBX,UAAjB,KAAgC,SAAnC,EAA8C;AAC1CpB,MAAAA,KAAK,CAACgB,IAAD,CAAL,CACKE,IADL,CACWC,QAAD,IAAc;AAChBU,QAAAA,OAAO,CAACC,GAAR,CAAY,EAAZ,EAAgBX,QAAhB;;AACA,YAAIA,QAAQ,CAACC,UAAT,KAAwB,IAA5B,EAAkC;AAC9B,cAAIC,KAAK,GAAGF,QAAQ,CAACH,IAAT,CAAcK,KAA1B;AACAC,UAAAA,YAAY,CAACC,OAAb,CAAqB,gBAArB,EAAuCF,KAAvC;AACAC,UAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+B,IAA/B;AACAN,UAAAA,QAAQ,CAACb,WAAW,CAACe,QAAD,CAAZ,CAAR;AACH;AACJ,OATL;AAUH;AACJ,GAfL,EAgBKK,KAhBL,CAgBYC,CAAD,IAAO;AACV,QAAIA,CAAC,CAACN,QAAF,CAAWa,MAAf,EAAuB;AACnBC,MAAAA,KAAK,CAACR,CAAC,CAACN,QAAF,CAAWa,MAAZ,CAAL,CADmB,CAEnB;AACH;AACH,GArBN;AAsBH,CAvBM","sourcesContent":["/* eslint-disable */\r\nimport {login, register} from \"../../utils/api\";\r\nimport {LOGIN, REGISTER} from \"./constants\";\r\nimport {loginAction} from \"./actions\";\r\nimport {success, error} from \"../../utils/helpers/infoMessages\";\r\n\r\nconst initialState = {\r\n    loginInfo:[],\r\n    isAuth: false\r\n};\r\n\r\nconst AuthReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case LOGIN:\r\n            return {\r\n                ...state,\r\n                loginInfo: action.payload,\r\n                isAuth: true,\r\n            };\r\n        case REGISTER:\r\n            return {\r\n                ...state,\r\n                // registerData: action.payload,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport default AuthReducer;\r\n\r\nexport const LoginRequest = (data) => (dispatch) => {\r\n    login(data)\r\n        .then((response) => {\r\n            if (response.statusText === \"OK\") {\r\n                let token = response.data.token;\r\n                localStorage.setItem(\"userLoginToken\", token);\r\n                localStorage.setItem(\"isAuth\", true);\r\n                success('You successfully login')\r\n                dispatch(loginAction(response));\r\n            }\r\n        })\r\n        .catch((e) => {\r\n            error(e.response.data.message)\r\n        })\r\n};\r\n\r\nexport const RegisterRequest = (data, history) => (dispatch) => {\r\n    register(data)\r\n        .then((response) => {\r\n            console.log(45, response)\r\n            if(response.request.statusText === \"Created\") {\r\n                login(data)\r\n                    .then((response) => {\r\n                        console.log(45, response)\r\n                        if (response.statusText === \"OK\") {\r\n                            let token = response.data.token;\r\n                            localStorage.setItem(\"userLoginToken\", token);\r\n                            localStorage.setItem(\"isAuth\", true);\r\n                            dispatch(loginAction(response));\r\n                        }\r\n                    })\r\n            }\r\n        })\r\n        .catch((e) => {\r\n            if (e.response.status) {\r\n                alert(e.response.status);\r\n                // infoAction(e.response.data.message, \"\");\r\n            }\r\n         });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}